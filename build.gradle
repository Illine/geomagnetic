import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

plugins {
    id "java-library"
    id "jacoco"
    id "idea"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id "org.springframework.boot" version "2.1.5.RELEASE"
    id "org.liquibase.gradle" version "2.0.4"
    id "com.bmuschko.docker-remote-api" version "6.4.0"
}

version = "1.0.0-SNAPSHOT"
group = "com.illine"
targetCompatibility = JavaVersion.VERSION_11
sourceCompatibility = JavaVersion.VERSION_11

ext {
    set("springCloudVersion", "Greenwich.SR1")
    set("springRetryVersion", "1.2.5.RELEASE")
    set("groovyVersion", "2.5.5")
    set("liquibaseCoreVersion", "3.6.3")
    set("modelMapperVersion", "2.3.4")
    set("p6spyVersion", "3.8.2")
    set("httpComponentsVersion", "4.5.9")
    set("lombokVersion", "1.18.8")
    set("postgresVersion", "42.2.5")
    set("liquibaseDslVersion", "2.0.1")
    set("logbackVersion", "1.2.3")
    set("junitVersion", "5.4.2")
    set("awaitilityVersion", "4.0.3")
}

configurations {
    annotationProcessor {
        extendsFrom compileOnly
    }

    testAnnotationProcessor {
        extendsFrom testCompileOnly
    }
}

repositories {
    mavenCentral()
}

ext {
    set("springCloudVersion", "Greenwich.SR1")
    set("groovyVersion", "2.5.5")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    api "org.springframework.boot:spring-boot-starter-actuator"
    api "org.springframework.boot:spring-boot-starter-web"
    api "org.springframework.boot:spring-boot-starter-data-jpa"
    api "org.springframework.boot:spring-boot-starter-validation"
    api "org.springframework.boot:spring-boot-starter-validation"
    api "org.springframework.retry:spring-retry:${springRetryVersion}"


    api "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    api "org.modelmapper:modelmapper:${modelMapperVersion}"
    api "p6spy:p6spy:${p6spyVersion}"
    api "org.apache.httpcomponents:httpclient:${httpComponentsVersion}"

    runtimeOnly "org.codehaus.groovy:groovy-all:${groovyVersion}"
    runtimeOnly "org.postgresql:postgresql:${postgresVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.springframework.boot:spring-boot-configuration-processor"

    liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:${liquibaseDslVersion}"
    liquibaseRuntime "ch.qos.logback:logback-classic:${logbackVersion}"
    liquibaseRuntime "org.postgresql:postgresql:${postgresVersion}"
}

liquibase {
    def resourceDir = sourceSets.main.resources.srcDirs.first()
    def properties = new Properties()
    def propertyFile = file("${resourceDir}/liquibase.properties")

    if (propertyFile.exists()) {
        propertyFile.withInputStream { properties.load(it) }
    }

    activities {
        main {
            changeLogFile "${projectDir}/liquibase/changelog.yaml"
            outputFile "${buildDir}/liquibase/sql-migration.sql"
            url properties.getOrDefault("url", "jdbc:postgresql://localhost:5432/weather")
            username properties.getOrDefault("username", "weather")
            password properties.getOrDefault("password", "weather")
            defaultSchemaName properties.getOrDefault("schema", "geomagnetic")
        }
    }
}

def imagePostgres = "illine/postgres-weather:latest"
def containerPostgres = "postgres-weather"

task pullImage(type: DockerPullImage) {
    image = imagePostgres
}

task removeImage(type: DockerRemoveImage) {
    targetImageId(imagePostgres)
    force = true
}

task createContainer(type: DockerCreateContainer) {
    dependsOn(pullImage)
    targetImageId(imagePostgres)
    containerName = containerPostgres
    hostConfig.portBindings = ["5000:5432"]
    hostConfig.autoRemove = true
}

task startContainer(type: DockerStartContainer) {
    dependsOn(createContainer)
    targetContainerId(containerPostgres)
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId(containerPostgres)
    finalizedBy(removeImage)
}

test {
    dependsOn(startContainer)
    useJUnitPlatform {
        includeTags "spring-mock", "spring-integration", "unit"
    }
    finalizedBy(stopContainer, jacocoTestReport)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = "CLASS"
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
            }
            excludes = [
                    "com.illine.weather.geomagnetic.GeomagneticApplication"
            ]
        }
        rule {
            element = "PACKAGE"
            excludes = [
                    "com.illine.weather.geomagnetic.config"
            ]
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.9
            }
        }
    }

}

jacocoTestReport {
    dependsOn(test)
    reports {
        html.destination file("${buildDir}/jacoco/html")
    }
}