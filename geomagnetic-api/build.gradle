import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage

plugins {
    id "org.liquibase.gradle" version "2.0.1"
    id "com.bmuschko.docker-java-application" version "6.1.1"
}

version = "1.0.0"

ext {
    set("liquibaseCoreVersion", "3.6.3")
    set("modelMapperVersion", "2.3.4")
    set("p6spyVersion", "3.8.2")
    set("httpComponentsVersion", "4.5.9")
    set("lombokVersion", "1.18.8")
    set("postgresVersion", "42.2.5")
    set("liquibaseDslVersion", "2.0.1")
    set("logbackVersion", "1.2.3")
    set("junitVersion", "5.4.2")
}

dependencies {
    api "org.springframework.boot:spring-boot-starter-web"
    api "org.springframework.cloud:spring-cloud-starter-config"
    api "org.springframework.boot:spring-boot-starter-data-jpa"
    api "org.springframework.boot:spring-boot-starter-validation"

    api "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    api "org.modelmapper:modelmapper:${modelMapperVersion}"
    api "p6spy:p6spy:${p6spyVersion}"
    api "org.apache.httpcomponents:httpclient:${httpComponentsVersion}"

    runtimeOnly "org.postgresql:postgresql:${postgresVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.springframework.boot:spring-boot-configuration-processor"

    liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:${liquibaseDslVersion}"
    liquibaseRuntime "ch.qos.logback:logback-classic:${logbackVersion}"
    liquibaseRuntime "org.postgresql:postgresql:${postgresVersion}"
}

liquibase {
    def resourceDir = sourceSets.main.resources.srcDirs.first().name
    def properties = new Properties()
    def propertyFile = file("${resourceDir}/liquibase.properties")

    if (propertyFile.exists()) {
        propertyFile.withInputStream { properties.load(it) }
    }

    activities {
        main {
            changeLogFile "${projectDir}/src/main/resources/liquibase/changelog.yaml"
            outputFile "${buildDir}/liquibase/sql-migration.sql"
            url properties.getOrDefault("url", "jdbc:postgresql://localhost:5432/weather")
            username properties.getOrDefault("username", "geomagnetic")
            password properties.getOrDefault("password", "geomagnetic")
            defaultSchemaName "geomagnetic"
        }
    }
}

def postgresImageName = "geomagnetic/postgres:latest"
def postgresContainerName = "geomagnetic-postgres"

task buildPostgresImage(type: DockerBuildImage) {
    inputDir = file("${rootDir}/postgres")
    images = [postgresImageName]
}

task removePostgresImage(type: DockerRemoveImage) {
    targetImageId(postgresImageName)
    force = true
}

task createPostgresContainer(type: DockerCreateContainer) {
    dependsOn(buildPostgresImage)
    targetImageId(postgresImageName)
    containerName = postgresContainerName
    hostConfig.portBindings = ["5432:5432"]
    hostConfig.autoRemove = true
}

task startPostgresContainer(type: DockerStartContainer) {
    dependsOn(createPostgresContainer)
    targetContainerId(postgresContainerName)
}

task stopPostgresContainer(type: DockerStopContainer) {
    targetContainerId(postgresContainerName)
    finalizedBy(removePostgresImage)
}

test {
    dependsOn(startPostgresContainer)
    useJUnitPlatform {
        includeTags "UnitTest"
        includeTags "LocalTest"
    }
    finalizedBy(stopPostgresContainer)
}